#!/bin/bash
#Carga variable de ejecutable
if [ $# -ne 1 ]; then
  echo "Ejecutable: $0 <ejecutable>"
  exit 1
fi

ejecutable=$1
cargar_archivo="grafico.log"

function limpiar_generar_graf {
  id_proceso=$1
  if ps -p $id_proceso > /dev/null; then
    kill -TERM $id_proceso
  fi

  # Generar el gráfico con Gnuplot
  generar_graf
}
# Función para generar el gráfico con gnuplot
function generar_graf {
  gnuplot << EOF
set terminal png
set output "grafico.png"
set xlabel "Tiempo"
set ylabel "Consumo (%)"
set title "Monitoreo del Uso de CPU y Memoria"
set xdata time
set timefmt "%Y-%m-%d %H:%M:%S"
set format x "%H:%M:%S"
plot "$cargar_archivo" using 1:2 with lines title "UsoCPU", "$cargar_archivo" using 1:3 with lines title "UsoMemoria"
EOF
}

# Ejecutar el binario recibido
$ejecutable &
id_proceso=$!

# Inicializar el archivo de registro
echo "Timestamp UsoCPU UsoMemoria" > $cargar_archivo
trap "generar_graf $id_proceso; exit 0" INT TERM

while true; do
  # Obtener la fecha y hora actual
  timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  
  # Obtiene el consumo de CPU y memoria del proceso
  cpu_uso=$(ps -o %cpu= -p $id_proceso | awk '{print $1}')
  memoria_uso=$(ps -o %mem= -p $id_proceso | awk '{print $1}')
  
  # Registrar los valores en el archivo de registro
  echo "$timestamp $cpu_uso $memoria_uso" >> $cargar_archivo
  
  sleep 1m  # En este intervalo

  # Verificar si el proceso ha terminado
  if ! ps -p $id_proceso > /dev/null; then
    generar_graf $id_proceso
    break
  fi
done

echo "Proceso finalizado. Se generó grafico.png." #Se genera gráfico cuando se termina

